// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/ad/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/ad/interfaces.go -destination=internal/pkg/ad/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/K1tten2005/go_vk_intern/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAdUsecase is a mock of AdUsecase interface.
type MockAdUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAdUsecaseMockRecorder
	isgomock struct{}
}

// MockAdUsecaseMockRecorder is the mock recorder for MockAdUsecase.
type MockAdUsecaseMockRecorder struct {
	mock *MockAdUsecase
}

// NewMockAdUsecase creates a new mock instance.
func NewMockAdUsecase(ctrl *gomock.Controller) *MockAdUsecase {
	mock := &MockAdUsecase{ctrl: ctrl}
	mock.recorder = &MockAdUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdUsecase) EXPECT() *MockAdUsecaseMockRecorder {
	return m.recorder
}

// CreateAd mocks base method.
func (m *MockAdUsecase) CreateAd(ctx context.Context, ad models.Ad) (models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAd", ctx, ad)
	ret0, _ := ret[0].(models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAd indicates an expected call of CreateAd.
func (mr *MockAdUsecaseMockRecorder) CreateAd(ctx, ad any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAd", reflect.TypeOf((*MockAdUsecase)(nil).CreateAd), ctx, ad)
}

// GetAds mocks base method.
func (m *MockAdUsecase) GetAds(ctx context.Context, filter models.Filter) ([]models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAds", ctx, filter)
	ret0, _ := ret[0].([]models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAds indicates an expected call of GetAds.
func (mr *MockAdUsecaseMockRecorder) GetAds(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAds", reflect.TypeOf((*MockAdUsecase)(nil).GetAds), ctx, filter)
}

// MockAdRepo is a mock of AdRepo interface.
type MockAdRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAdRepoMockRecorder
	isgomock struct{}
}

// MockAdRepoMockRecorder is the mock recorder for MockAdRepo.
type MockAdRepoMockRecorder struct {
	mock *MockAdRepo
}

// NewMockAdRepo creates a new mock instance.
func NewMockAdRepo(ctrl *gomock.Controller) *MockAdRepo {
	mock := &MockAdRepo{ctrl: ctrl}
	mock.recorder = &MockAdRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdRepo) EXPECT() *MockAdRepoMockRecorder {
	return m.recorder
}

// InsertAd mocks base method.
func (m *MockAdRepo) InsertAd(ctx context.Context, ad models.Ad) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAd", ctx, ad)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAd indicates an expected call of InsertAd.
func (mr *MockAdRepoMockRecorder) InsertAd(ctx, ad any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAd", reflect.TypeOf((*MockAdRepo)(nil).InsertAd), ctx, ad)
}

// SelectAds mocks base method.
func (m *MockAdRepo) SelectAds(ctx context.Context, filter models.Filter) ([]models.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAds", ctx, filter)
	ret0, _ := ret[0].([]models.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAds indicates an expected call of SelectAds.
func (mr *MockAdRepoMockRecorder) SelectAds(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAds", reflect.TypeOf((*MockAdRepo)(nil).SelectAds), ctx, filter)
}
